#!/bin/bash
# Usage: git update

print_usage() {
    echo "Usage: git update [<options>] [<checkout-branch>]"
    echo "Pulls master and rebases all local branches"
    echo ""
    printf "   %-24s%s\n" "-a, --always-abort" "Always abort rebase during merge conflicts"
    printf "   %-24s%s\n" "-b, --select-branch" "Select base branches"
    printf "   %-24s%s\n" "-i, --interactive" "Interactive rebase"
    printf "   %-24s%s\n" "-n, --no-pull" "Do not pull master"
    printf "   %-24s%s\n" "-s, --no-unstash" "Stashed changes stay stashed"
    exit $1
}

stash() {
    # check if we have uncommitted changes to stash
    git status -uno --ignore-submodules --porcelain | grep "^." >/dev/null;

    if [ $? -eq 0 ]; then
        echo -e "\033[1;43m STASHING CHANGES \033[0m";
        if git stash push -um "git-update on `date`";

        then
            stash=1;
        fi
        echo;
    fi
}

unstash() {
    # check if we stashed uncommitted changes
    if [ $stash -eq 1 ]; then
        git stash pop;
    fi
}

handle_conflict() {
    while true; do
        if [ $always_abort -eq 1 ]; then
            rebase_action="a"
        else
            echo -n -e "\033[01;37m(\033[0;33mC\033[1;37montinue/\033[0;33mA\033[1;37mbort/\033[0;33mI\033[1;37mnteractive/\033[0;33mS\033[1;37melect branch):\033[0m"
            read -n 1 -p " " rebase_action </dev/tty;
            if [ ! -z "$rebase_action" ]; then echo; fi
        fi
        case "$rebase_action" in
            c)
                git add -A
                git rebase --continue
                conflict=$(git ls-files -u | wc -l)
                if [ $conflict -eq 0 ]; then
                    break
                fi
                ;;
            a)
                git rebase --abort
                unresolved_conflicts+=($1)
                break
                ;;
            i)
                git rebase --abort
                git rebase -i --update-refs $rebase_branch
                conflict=$(git ls-files -u | wc -l)
                if [ $conflict -eq 0 ]; then
                    break
                fi
                ;;
            s)
                git rebase --abort
                PS3=$(echo -e "\033[1;33mSelect branch (current is \033[1;36m$rebase_branch\033[1;33m): \033[0m")
                other_branches=$(echo master; for b in $all_branches; do if [ $b != $branch ] && [ $b != "master" ]; then echo $b; fi; done)
                select_option $other_branches
                choice=$?
                f="-f$((choice+1))"
                rebase_branch=$(echo $other_branches | cut -d' ' $f)
                git rebase $interactive --update-refs $rebase_branch $branch
                conflict=$(git ls-files -u | wc -l)
                if [ $conflict -eq 0 ]; then
                    break
                fi
                ;;
        esac
    done
}

select_option() {
    spaces=$(stty size | cut -d' ' -f2)
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?33h"; }
    cursor_blink_off() { printf "$ESC[?33l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; } 
    print_option()     { hash=`git rev-parse --short $1`; printf "  $ESC[1;36m$1$ESC[0m $hash"; printf '%*s' $((spaces - ${#1} - ${#hash} - 3)); }
    print_selected()   { hash=`git rev-parse --short $1`; printf "$ESC[1;43m  $1 $hash"; printf "%*s" $((spaces - ${#1} - ${#hash} - 3)) "$ESC[0m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done
    printf "\n"

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $# - 1))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        cursor_to $startrow
        printf "$ESC[0;33mSelect branch:$ESC[0m"
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx + 1))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $startrow
    cursor_blink_on

    for opt; do printf '%*s' $spaces; echo; done
    printf '%*s' $spaces; echo
    cursor_to $startrow
    idx=0;
    for opt; do if [ $idx -eq $selected ]; then echo -e "$ESC[1;36m$opt$ESC[0m"; break; else ((idx++)); fi; done

    return $selected
}

current_branch=$(git branch --show-current)
all_branches=`git for-each-ref --sort=committerdate --format='%(refname:short)' refs/heads`
checkout_branch=$current_branch

interactive=""
nopull=0
always_abort=0
specify_branch=0
no_unstash=0
while test $# -gt 0; do
    case "$1" in
        --interactive)
            interactive="-i"
            ;;
        --no-pull)
            nopull=1
            ;;
        --always-abort)
            always_abort=1
            ;;
        --select-branch)
            specify_branch=1
            ;;
        --no-unstash)
            no_unstash=1
            ;;
        -*)
            if [[ "$1" =~ ^-.*[^abins].*$ ]]; then
               echo "ERROR: Invalid argument: $1"
               print_usage 2
            fi
            if [[ "$1" =~ ^-.*i.*$ ]]; then
                interactive="-i"
            fi
            if [[ "$1" =~ ^-.*n.*$ ]]; then
                nopull=1
            fi
            if [[ "$1" =~ ^-.*a.*$ ]]; then
                always_abort=1
            fi
            if [[ "$1" =~ ^-.*b.*$ ]]; then
                specify_branch=1
            fi
            if [[ "$1" =~ ^-.*s.*$ ]]; then
                no_unstash=1
            fi
            ;;
        *)
            checkout_branch="--"
            if [ $# -gt 1 ]; then
                echo "ERROR: Checkout branch must be last argument"
                print_usage 2
            else
                if echo "$all_branches" | grep -qw "$1"; then
                    checkout_branch=$1
                else
                    printf "ERROR: No branch to checkout named \"%s\"\n" $1
                    exit 3
                fi
            fi
    esac
    shift
done

stash=0;
stash;

merge_conflicts=();
unresolved_conflicts=();

if [ $nopull -eq 0 ]; then
    echo -e "\033[1;43m PULLING MASTER \033[0m"
    if [ "$current_branch" != "master" ]; then
        git checkout master > /dev/null 2>&1;
    fi
    git pull;
    submodule_update=$(git status --porcelain)
    if ! [ -z "$submodule_update" ]; then
        echo
        echo -e "\033[1;43m SUBMODULE UPDATE \033[0m"
        git submodule update
    fi
    echo
fi

handled_branches=("master");

for branch in $all_branches; do
    if echo ${handled_branches[@]} | grep -wq $branch; then continue; fi

    common_branches=$(git branch --contains $branch | cut -c 3-)
    tied_branches=$(git branch --points-at $branch | wc -l)
    if [ $(echo "$common_branches" | wc -l) -gt $tied_branches ]; then continue; fi

    echo -e "\033[1;43m REBASE \033[49m \033[1;33m$branch\033[0m"

    rebase_branch="master"
    if [ $specify_branch -eq 1 ]; then
        PS3=$(echo -e "\033[1;33mSelect branch (default is \033[1;36mmaster\033[1;33m): \033[0m")
        other_branches=$(echo master; for b in $all_branches; do if [ $b != $branch ] && [ $b != "master" ]; then echo $b; fi; done)
        select_option $other_branches
        choice=$?
        f="-f$((choice+1))"
        rebase_branch=$(echo $other_branches | cut -d' ' $f)
    fi
    git rebase $interactive --update-refs $rebase_branch $branch

    conflict=$(git ls-files -u | wc -l)
    if [ $conflict -gt 0 ]; then
        merge_conflicts+=($branch)
        handle_conflict $branch;
    fi
    echo
    handled_branches+=($common_branches)
done

last_checkout=0
if [ "$checkout_branch" != "$(git branch --show-current)" ]; then
    echo -e "\033[1;43m CHECKOUT \033[49m \033[1;33m$checkout_branch\033[0m"
    git checkout $checkout_branch > /dev/null 2>&1;
    last_checkout=1;
fi

if [ $no_unstash -eq 0 ]; then unstash; fi

if [ $last_checkout -eq 1 ]; then
    echo
fi

unresolved_str="${unresolved_conflicts[@]}"
echo -e "\033[1;43m RESULT \033[0m"
echo "Finished updating all branches.";
if [ 0 -eq ${#merge_conflicts[@]} ]; then
    echo "No merge conflicts found.";
else
    echo "Merge conflicts were found in the following branches:"
    for branch in "${merge_conflicts[@]}"; do
        if [ -z "$branch" ]; then
            continue;
        fi
        branch=`echo $branch | tr -d '[:space:]'`
        if [[ "$unresolved_str" =~ "$branch" ]]; then
            echo -e "\033[33m$branch (aborted)\033[0m"
        else
            echo -e "\033[32m$branch (resolved)\033[0m"
        fi
    done
fi

if [[ "$unresolved_str" =~ "$checkout_branch" ]]; then
    exit 1
else
    exit 0
fi
